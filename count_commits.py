#!/usr/bin/env python3

"""
This script counts the number of commits with only bug-fixing, non bug-fixing, or both changes in the LLTC4J dataset[1].
The CSV is expected to have a `group` column with the values `fix` or `other` to indicate whether the commit is a bug-fixing commit or not.
The results are printed to stdout.

References:
1. Herbold, Steffen, et al. "A fine-grained data set and analysis of tangling in bug fixing commits." Empirical Software Engineering 27.6 (2022): 125.

Arguments:
    --groundtruthdir. Required argument to specify the root directory where the ground truth CSV files generated by `export_lltc4j.py` are stored.
"""

import argparse
from collections import defaultdict
import os
import pandas as pd

FIX_LABEL = "fix"
OTHER_LABEL = "other"
MIXED_LABEL = 'mixed'


def get_change_type(df: pd.DataFrame) -> str:
    """
    Returns the type of changes in the given dataframe.
    """
    if df.empty:
        return "empty"
    if all(df["group"] == FIX_LABEL):
        return FIX_LABEL
    if all(df["group"] == OTHER_LABEL):
        return OTHER_LABEL
    if df["group"].isin([FIX_LABEL, OTHER_LABEL]).sum() == len(df["group"]):
        return MIXED_LABEL

    raise ValueError(
        f"{df['group']} contains an unexpected value in the `group` column. Should be `{FIX_LABEL}` or `{OTHER_LABEL}`."
    )


def count_commits(dir: str):
    """
    Counts the number of commits with only bug-fixing changes in the given directory.

    Arguments:
    - dir: Root directory where the CSV ground truth is.
    """
    metrics = defaultdict(int)
    for root, _, files in os.walk(dir):
        for file in files:
            if file == "truth.csv":
                metrics["total"] += 1
                truth_file = os.path.join(root, file)
                df = pd.read_csv(truth_file, header=0)
                change_type = get_change_type(df)
                metrics[change_type] += 1

    print(f"Visited {metrics['total']} truth.csv files")
    print(f"Found {metrics['empty']} empty truth.csv files")
    print(f"Found {metrics[FIX_LABEL]} files with only bugfix changes.")
    print(f"Found {metrics[OTHER_LABEL]} files with only non-bugfix changes.")
    print(f"Found {metrics[MIXED_LABEL]} files with both changes.")


def main():
    """
    Implement the logic of the script. See the module docstring.
    """
    main_parser = argparse.ArgumentParser(
        prog="count_bugfix_only_commit.py",
        description="Counts the number of commits with only bug-fixing changes in the LLTC4J dataset.",
    )

    main_parser.add_argument(
        "-d",
        "--groundtruthdir",
        help="The directory storing the commit list and the ground truth CSVs.",
        metavar="PATH",
        required=True,
    )

    args = main_parser.parse_args()

    ground_truth_dir = os.path.realpath(args.groundtruthdir)
    if not os.path.exists(args.groundtruthdir):
        raise ValueError(f"Directory {ground_truth_dir} does not exist.")

    count_commits(ground_truth_dir)


if __name__ == "__main__":
    main()
