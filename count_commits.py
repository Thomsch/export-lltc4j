#!/usr/bin/env python3

"""
This script counts the number of commits with only bug-fixing, non bug-fixing, or both changes in the LLTC4J dataset[1].
The results are printed in stdout.

References:
1. Herbold, Steffen, et al. "A fine-grained data set and analysis of tangling in bug fixing commits." Empirical Software Engineering 27.6 (2022): 125.

Arguments:
    --groundtruthdir. Required argument to specify the root directory where the ground truth CSV files generated by `export_lltc4j.py` are stored.
"""

import argparse
import os
import pandas as pd


def get_change_type(df: pd.DataFrame) -> str:
    """
    Returns the type of changes in the given dataframe.
    """
    if df.empty:
        return "empty"
    if all(df["group"] == "bugfix"):
        return "bugfix"
    if all(df["group"] == "nonbugfix"):
        return "nonbugfix"
    if df["group"].isin(["bugfix", "nonbugfix"]).sum() == len(df["group"]):
        return "mixed"

    raise ValueError(
        f"{df['group']} contains an unexpected value in the `group` column. Should be `bugfix` or `nonbugfix`."
    )


def count_commits(dir: str):
    """
    Counts the number of commits with only bug-fixing changes in the given directory.

    Arguments:
    - dir: Root directory where the CSV ground truth is.
    """

    total_files = 0
    bugfix_files = 0
    empty_files = 0
    non_bugfix_files = 0
    mixed_changes_files = 0
    for root, _, files in os.walk(dir):
        for file in files:
            if file == "truth.csv":
                total_files += 1
                truth_file = os.path.join(root, file)
                df = pd.read_csv(truth_file, header=0)
                change_type = get_change_type(df)

                if change_type == "empty":
                    empty_files += 1
                elif change_type == "bugfix":
                    bugfix_files += 1
                elif change_type == "nonbugfix":
                    non_bugfix_files += 1
                elif change_type == "mixed":
                    mixed_changes_files += 1

    print(f"Visited {total_files} truth.csv files")
    print(f"Found {empty_files} empty truth.csv files")
    print(f"Found {bugfix_files} files with only bugfix changes.")
    print(f"Found {non_bugfix_files} files with only non-bugfix changes.")
    print(f"Found {mixed_changes_files} files with both changes.")


def main():
    """
    Implement the logic of the script. See the module docstring.
    """
    main_parser = argparse.ArgumentParser(
        prog="count_bugfix_only_commit.py",
        description="Counts the number of commits with only bug-fixing changes in the LLTC4J dataset.",
    )

    main_parser.add_argument(
        "-d",
        "--groundtruthdir",
        help="The directory storing the commit list and the ground truth CSVs.",
        metavar="PATH",
        required=True,
    )

    args = main_parser.parse_args()

    ground_truth_dir = os.path.realpath(args.groundtruthdir)
    if not os.path.exists(args.groundtruthdir):
        raise ValueError(f"Directory {ground_truth_dir} does not exist.")

    count_commits(ground_truth_dir)


if __name__ == "__main__":
    main()
